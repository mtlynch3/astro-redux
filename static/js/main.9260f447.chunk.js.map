{"version":3,"sources":["store/getAstronauts.js","App.js","reportWebVitals.js","store/index.js","index.js"],"names":["GET_ASTRONAUTS","App","this","props","getAstronautsThunk","astros","astronauts","style","margin","map","astro","name","Component","connect","state","dispatch","a","axios","get","res","data","people","type","payload","console","error","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","logger","createLogger","collapsed","middleware","composeWithDevTools","applyMiddleware","thunkMiddleware","store","createStore","action","ReactDOM","render","document","getElementById"],"mappings":"iQAGMA,EAAiB,iB,OCIjBC,E,uKAEJ,WAEEC,KAAKC,MAAMC,uB,oBAGb,WAGE,IAAIC,EAASH,KAAKC,MAAMG,WACxB,OACE,qBAAKC,MAAO,CAACC,OAAQ,QAArB,SACGH,EAAOI,KAAK,SAACC,GACZ,OACE,6BACEA,EAAMC,MADCD,EAAMC,e,GAfTC,aAqCHC,mBANf,SAAkBC,GAChB,MAAO,CACLR,WAAYQ,EAAMR,eARtB,SAAqBS,GACnB,MAAO,CACLX,mBAAoB,kBAAMW,EDpBI,uCAAM,WAAMA,GAAN,eAAAC,EAAA,+EAEtBC,IAAMC,IAAI,0CAFY,OAElCC,EAFkC,OAKtCJ,GAbqBV,EAaEc,EAAIC,KAAKC,OAZzB,CACLC,KAAMtB,EACNuB,QAASlB,KAK2B,gDAQtCmB,QAAQC,MAAR,MARsC,kCARlB,IAACpB,IAQiB,oBAAN,2DC8BnBQ,CAA+BZ,GChC/ByB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,+BCGRQ,EAASC,uBAAa,CAAEC,WAAW,IACnCC,EAAaC,8BAAoBC,0BAAgBC,IAAiBN,IAKzDO,EAHDC,uBHcS,WAAuC,IAAtC7B,EAAqC,uDAA7B,CAACR,WAAY,IAAKsC,EAAW,uCAC3D,OAAQA,EAAOtB,MACb,KAAKtB,EACH,MAAO,CACLM,WAAYsC,EAAOrB,SAEvB,QACE,OAAOT,KGrBsBwB,GCHnCO,IAASC,OACP,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFK,SAASC,eAAe,SAM1BtB,M","file":"static/js/main.9260f447.chunk.js","sourcesContent":["import axios from \"axios\";\n\n// ACTION TYPES;\nconst GET_ASTRONAUTS = \"GET_ASTRONAUTS\";\n\n// ACTION CREATORS;\nconst getAstronauts = (astros) => {\n  return {\n    type: GET_ASTRONAUTS,\n    payload: astros,\n  };\n};\n\n// THUNK CREATORS;\nexport const getAstronautsThunk = () => async dispatch => {\n\ttry {\n\t\tlet res = await axios.get('http://api.open-notify.org/astros.json');\n\t\t//res.data will be whole object returned by api endpoint\n\t\t//payload is res.data.people\n\t\tdispatch(getAstronauts(res.data.people));\n\n\t} catch(err) {\n\t\tconsole.error(err);\n\t}\n};\n\n// REDUCER;\nexport const reducer = (state = {astronauts: []}, action) => {\n  switch (action.type) {\n    case GET_ASTRONAUTS:\n      return {\n        astronauts: action.payload,\n      }\n    default:\n      return state;\n  }\n};\n","\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { getAstronautsThunk } from './store/getAstronauts'\n\n\n\nclass App extends Component {\n\n  componentDidMount() {\n    //make sure data is available on load\n    this.props.getAstronautsThunk();\n  }\n\n  render() {\n    //get value from redux store, which holds the state for our application\n    //array of astronauts\n    let astros = this.props.astronauts;\n    return(\n      <div style={{margin: '10px'}}>\n        {astros.map( (astro) => {\n          return (\n            <li key={astro.name}>\n             {astro.name}\n             </li>\n          )}) \n        }\n      </div>\n    );\n  }\n};\n\nfunction mapDispatch(dispatch) {\n  return { \n    getAstronautsThunk: () => dispatch(getAstronautsThunk()) \n  }\n}\n\nfunction mapState(state) {\n  return {\n    astronauts: state.astronauts\n  }\n}\n\nexport default connect(mapState, mapDispatch)(App)","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { applyMiddleware, createStore } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// will normally be importing several reducers \n// and need to combine them using combineReducers;\nimport { reducer } from './getAstronauts';\n\n// Construct our Redux store;\nconst logger = createLogger({ collapsed: true });\nconst middleware = composeWithDevTools(applyMiddleware(thunkMiddleware, logger));\n\nconst store = createStore(reducer, middleware);\n\n// Export our store by default, which will be provided to and injected within our entire application;\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n//redux\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}